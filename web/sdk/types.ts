/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * GENERATED BY SPEC v0.1.0 â€” DO NOT EDIT BY HAND.
 * This file mirrors the contract in spec/gateway.yaml and is regenerated whenever the spec changes.
 */

export type Problem = {
  type?: string | null;
  title: string;
  status: number;
  detail?: string;
  instance?: string;
};

export type SpeechAdapter = {
  key: string;
  label: string;
  description?: string | null;
  path?: string | null;
  topics?: string[];
};

export type SpeechJobStatus = "uploaded" | "transcribed" | "emr_generated" | "failed";

export type SpeechJobTimeline = {
  uploadedAt?: string | null;
  transcribedAt?: string | null;
  emrGeneratedAt?: string | null;
};

export type SpeechJob = {
  jobId: string;
  patientId: string;
  status: SpeechJobStatus;
  adapterKey?: string | null;
  topics?: string[] | null;
  submittedAt: string;
  transcriptFileId?: string | null;
  emrFileId?: string | null;
  transcriptUrl?: string | null;
  emrUrl?: string | null;
  timeline?: SpeechJobTimeline | null;
  errors?: string[];
};

export type SpeechPatientSummary = {
  patientId: string;
  latestStatus: SpeechJobStatus;
  latestJobId?: string | null;
  recordCount?: number;
  lastUpdatedAt?: string | null;
};

export type RagSyncResponse = {
  status?: "queued" | "completed" | "failed";
  startedAt?: string | null;
};

export type GraphPatientSummary = {
  patientId: string;
  hasGraph: boolean;
  graphHtmlUrl?: string | null;
  lastIngestedAt?: string | null;
  nodeCount?: number | null;
  edgeCount?: number | null;
};

export type GraphNode = {
  id: string;
  attrs: Record<string, any>;
};

export type GraphEdge = {
  source: string;
  target: string;
  attrs: Record<string, any>;
};

export type GraphResponse = {
  patientId: string;
  nodes: GraphNode[];
  edges: GraphEdge[];
};

export type RagQueryMode = "hybrid" | "graph";

export type RagQuery = {
  question: string;
  mode?: RagQueryMode;
  patientIds?: string[] | null;
};

export type RagAnswer = {
  question: string;
  mode: RagQueryMode;
  answer: string;
  contextJson?: string | null;
  evidenceNodeIds?: string[];
};

export type CorrelationHeaders = {
  "x-correlation-id": string;
};

export type ListSpeechAdaptersResponse = {
  adapters: SpeechAdapter[];
};

export type ListSpeechJobsResponse = {
  jobs: SpeechJob[];
};

export type ListSpeechPatientsResponse = {
  patients: SpeechPatientSummary[];
};

export type ListRagPatientsResponse = {
  patients: GraphPatientSummary[];
};

export type HealthResponse = {
  status: string;
  dependencies?: Array<{
    name?: string;
    status?: "up" | "down" | "warning";
    details?: string;
  }>;
};
